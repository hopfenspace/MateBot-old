const STATE_FILE = "state.json";
const BOT_TOKEN = "<bot token here>";



import puts, f*, str*;
const SEEK_SET = 0;
const SEEK_END = 2;

import List from "libs/list.ptrs";
import Map from "libs/map.ptrs";
import json_encode, json_decode from "libs/json.ptrs";
import Telegram, MessageUpdate, InlineKeyboard, CallbackQuery from "libs/telegram.ptrs";

var accounts;
var communism = false;

scoped
{
	var fd = fopen(STATE_FILE, "r");
	if(!fd)
	{
		accounts = new Map();
	}
	else
	{
		fseek(fd, 0, SEEK_END);
		var size = ftell(fd);
		fseek(fd, 0, SEEK_SET);

		var content = new_stack array{size + 1};
		fread(content, size, 1, fd);
		fclose(fd);
		content[size] = 0;

		accounts = json_decode(content);
	}
}

function saveState()
{
	var str = json_encode(accounts);
	var fd = fopen(STATE_FILE, "w+");

	fwrite(str, 1, (sizeof str) - 1, fd);
	fputc('\n', fd);
	fclose(fd);

	delete str;
}
function checkCommand(text, cmd, argptr)
{
	var cmdlen = strlen(cmd);
	if(strncmp(text, cmd, cmdlen) != 0
		|| (text[cmdlen] != '@' && text[cmdlen] != ' ' && text[cmdlen] != 0))
		return false;

	if(argptr)
	{
		if(text[cmdlen] == '@')
		{
			var arg = strstr!native(text + cmdlen, " ");
			if(arg != NULL)
				*argptr = (arg + 1)[0 .. sizeof text - (arg - text) - 1];
			else
				*argptr = NULL;
		}
		else if(text[cmdlen] == 0)
		{
			*argptr = NULL;
		}
		else
		{
			*argptr = text + cmdlen;
		}
	}

	return true;
}
function createCommunismKeyboard(communists)
{
	var keyboard = new InlineKeyboard(accounts.count + 1, (text, action) -> { delete text; });

	var i = 0;
	foreach(_, user in accounts)
	{
		var text;
		if(communists.indexOf(user.id) == -1)
			text = user.name;
		else
			text = "✔ ${user.name}";
	
		keyboard.addButton(i++, text, user.id);
	}

	keyboard.addButton(i, "OK");
	keyboard.addButton(i, "CANCEL");

	return keyboard;
}

var bot = new Telegram(BOT_TOKEN);
while(true) try
{
	var msg = bot.getUpdate();

	if(msg instanceof CallbackQuery)
	{
		if(!communism)
		{
		}
		else if(msg.senderId != communism.creator)
		{
			msg.answer("You are not allowed to do that");
		}
		else if(strcmp(msg.action, "OK") == 0)
		{
			var count = communism.communists.length;
			var split = cast<float>communism.amount / cast<float>count;

			var ids = communism.communists;
			var text = "";
			for(var i = 0; i < ids.length; i++)
			{
				var user = accounts[ids[i]];
				user.balance -= split;
				text = "$text, ${user.name}";
			}

			var creator = accounts[communism.creator];
			creator.balance += communism.amount;
			text = "$text payed $split€\n${creator.name} received ${communism.amount}€";

			saveState();

			bot.editMessage(msg.message.chat, msg.message.id, text + 2);

			delete communism.communists;
			delete communism;
			communism = false;
		}
		else if(strcmp(msg.action, "CANCEL") == 0)
		{
			bot.editMessage(msg.message.chat, msg.message.id, "Communism canceled");
			delete communism.communists;
			delete communism;
			communism = false;
		}
		else
		{
			var id = strtoll(msg.action, NULL, 10);
			if(id == communism.creator)
			{
				msg.answer("You cannot remove yourself from communism");
			}
			else
			{
				var index = communism.communists.indexOf(id);
				if(index == -1)
					communism.communists.add(id);
				else
					communism.communists.splice(index, 1);

				var keyboard = createCommunismKeyboard(communism.communists);
				bot.editMessage(msg.message.chat, msg.message.id,
					"Please select all communists", _, keyboard);
				delete keyboard;
			}
		}
	}
	else if(msg instanceof MessageUpdate)
	{
		var arg;
		if(checkCommand(msg.text, "/drink"))
		{
			if(!(msg.senderId in accounts))
			{
				accounts[msg.senderId] = map {
					id: msg.senderId,
					name: strdup!native(msg.sender)[0 .. (sizeof msg.sender) + 1],
					balance: 0
				};
			}

			accounts[msg.senderId].balance -= 1;

			msg.reply("OK, enjoy your drink!");

			saveState();
		}
		else if(checkCommand(msg.text, "/balance"))
		{
			var balance;
			if(msg.senderId in accounts)
				balance = accounts[msg.senderId].balance;
			else
				balance = 0;

			msg.reply("Your balance is: $balance€");
		}
		else if(checkCommand(msg.text, "/blame"))
		{
			var min = false;
			foreach(_, user in accounts)
			{
				if(!min || min.balance >= user.balance)
				{
					min = user;
				}
			}

			if(min)
				msg.reply("It's [${min.name}](tg://user?id=${min.id})s turn to restock the Mate", "markdown");
			else
				msg.reply("No users yet, noone to blame!");
		}
		else if(checkCommand(msg.text, "/communism", &arg))
		{
			if(communism)
			{
				msg.reply("There is already a communism in progress");
			}
			else if(!arg)
			{
				msg.reply("Usage: /communism <amount>\nSplit a bill onto multiple people");
			}
			else
			{
				var amount = strtoull(arg, NULL, 0);
				var communists = new List();
				communists.add(msg.senderId);

				var keyboard = createCommunismKeyboard(communists);
				var id = msg.reply("Please select all communists",
					undefined, keyboard);
				delete keyboard;

				communism = map {
					creator: msg.senderId,
					amount: amount,
					communists: communists
				};
			}
		}
		else if(checkCommand(msg.text, "/pay"))
		{
			msg.reply("Soon™");
		}
	}

	delete msg;
}
catch(err, trace)
{
	puts("$err\n$trace");
}